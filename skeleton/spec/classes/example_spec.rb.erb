require 'spec_helper'

describe '<%= metadata.name %>' do
  context 'supported operating systems' do
    on_supported_os.each do |os, facts|
      context "on #{os}" do
        let(:facts) do
          facts
        end

        context "<%= metadata.name %> class without any parameters" do
          it { is_expected.to compile.with_all_deps }

          it { is_expected.to create_class('<%= metadata.name %>') }

          it { is_expected.to contain_class('<%= metadata.name %>::params') }
          it { is_expected.to contain_class('<%= metadata.name %>::install').that_comes_before('Class[<%= metadata.name %>::config]') }
          it { is_expected.to contain_class('<%= metadata.name %>::config') }
          it { is_expected.to contain_class('<%= metadata.name %>::service').that_subscribes_to('Class[<%= metadata.name %>::config]') }

          it { is_expected.to contain_service('<%= metadata.name %>') }
          it { is_expected.to contain_package('<%= metadata.name %>').with_ensure('installed') }
        end
      end
    end
  end

  context 'unsupported operating system' do
    describe '<%= metadata.name %> class without any parameters on Solaris/Nexenta' do
      let(:facts) do
        {
          :osfamily        => 'Solaris',
          :operatingsystem => 'Nexenta',
        }
      end

      context 'shows failure' do
        it { expect { is_expected.to create_class('<%= metadata.name %>') }.to raise_error(Puppet::Error, /Solaris not supported/) }
      end
    end
  end
end
